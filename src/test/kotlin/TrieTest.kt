import org.junit.jupiter.api.Test
import kotlin.test.assertEquals
import kotlin.test.assertNull

class TrieTest {

    @Test
    fun simple() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertNull(trie.get("foo"))
    }

    @Test
    fun empty() {
        val trie = Trie<Int>()
        assertNull(trie.get("foo"))
    }

    @Test
    fun prefix() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertNull(trie.get("hell"))
        assertNull(trie.get("worl"))
        assertNull(trie.get("fo"))
        assertNull(trie.get("ba"))
        assertNull(trie.get("baa"))
    }

    @Test
    fun suffix() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertNull(trie.get("ello"))
        assertNull(trie.get("rld"))
        assertNull(trie.get("oo"))
        assertNull(trie.get("ar"))
        assertNull(trie.get("az"))
    }

    @Test
    fun duplicate() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("hello", 2)
        trie.put("hello", 3)
        trie.put("hello", 4)
        trie.put("hello", 5)
        assertEquals(5, trie.get("hello"))
    }

    @Test
    fun duplicatePrefix() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("hell", 2)
        trie.put("hel", 3)
        trie.put("he", 4)
        trie.put("h", 5)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("hell"))
        assertEquals(3, trie.get("hel"))
        assertEquals(4, trie.get("he"))
        assertEquals(5, trie.get("h"))
    }

    @Test
    fun duplicateSuffix() {
        val trie = Trie<Int>()
        trie.put("h", 1)
        trie.put("he", 2)
        trie.put("hel", 3)
        trie.put("hell", 4)
        trie.put("hello", 5)
        assertEquals(1, trie.get("h"))
        assertEquals(2, trie.get("he"))
        assertEquals(3, trie.get("hel"))
        assertEquals(4, trie.get("hell"))
        assertEquals(5, trie.get("hello"))
    }

    @Test
    fun duplicatePrefixSuffix() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("hell", 2)
        trie.put("hel", 3)
        trie.put("he", 4)
        trie.put("h", 5)
        trie.put("h", 6)
        trie.put("he", 7)
        trie.put("hel", 8)
        trie.put("hell", 9)
        trie.put("hello", 10)
        assertEquals(10, trie.get("hello"))
        assertEquals(9, trie.get("hell"))
        assertEquals(8, trie.get("hel"))
        assertEquals(7, trie.get("he"))
        assertEquals(6, trie.get("h"))
    }

    @Test
    fun duplicateSuffixPrefix() {
        val trie = Trie<Int>()
        trie.put("h", 1)
        trie.put("he", 2)
        trie.put("hel", 3)
        trie.put("hell", 4)
        trie.put("hello", 5)
        trie.put("hello", 6)
        trie.put("hell", 7)
        trie.put("hel", 8)
        trie.put("he", 9)
        trie.put("h", 10)
        assertEquals(10, trie.get("h"))
        assertEquals(9, trie.get("he"))
        assertEquals(8, trie.get("hel"))
        assertEquals(7, trie.get("hell"))
        assertEquals(6, trie.get("hello"))
    }

    @Test
    fun size() {
        val trie = Trie<Int>()
        assertEquals(0, trie.size)
        trie.put("hello", 1)
        assertEquals(1, trie.size)
        trie.put("world", 2)
        assertEquals(2, trie.size)
        trie.put("foo", 3)
        assertEquals(3, trie.size)
        trie.put("bar", 4)
        assertEquals(4, trie.size)
        trie.put("baz", 5)
        assertEquals(5, trie.size)
        trie.put("hello", 6)
        assertEquals(5, trie.size)
        trie.put("world", 7)
        assertEquals(5, trie.size)
        trie.put("foo", 8)
        assertEquals(5, trie.size)
        trie.put("bar", 9)
        assertEquals(5, trie.size)
        trie.put("baz", 10)
        assertEquals(5, trie.size)
        trie.put("ba", 11)
        assertEquals(6, trie.size)
        trie.put("baa", 12)
        assertEquals(7, trie.size)
        trie.put("fo", 13)
        assertEquals(8, trie.size)
    }

    @Test
    fun keys() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        trie.put("ba", 6)
        trie.put("baa", 7)
        trie.put("fo", 8)
        assertEquals(setOf("hello", "world", "foo", "bar", "baz", "ba", "baa", "fo"), trie.keys().toSet())
    }

    @Test
    fun keysWithPrefix() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        trie.put("ba", 6)
        trie.put("baa", 7)
        trie.put("fo", 8)
        assertEquals(setOf("hello"), trie.keysWithPrefix("h").toSet())
        assertEquals(setOf("hello"), trie.keysWithPrefix("he").toSet())
        assertEquals(setOf("hello"), trie.keysWithPrefix("hel").toSet())
        assertEquals(setOf("hello"), trie.keysWithPrefix("hell").toSet())
        assertEquals(setOf("hello"), trie.keysWithPrefix("hello").toSet())
        assertEquals(setOf(), trie.keysWithPrefix("helloo").toSet())
        assertEquals(setOf("world"), trie.keysWithPrefix("w").toSet())
        assertEquals(setOf("world"), trie.keysWithPrefix("wo").toSet())
        assertEquals(setOf("world"), trie.keysWithPrefix("wor").toSet())
        assertEquals(setOf("world"), trie.keysWithPrefix("worl").toSet())
        assertEquals(setOf("world"), trie.keysWithPrefix("world").toSet())
        assertEquals(setOf(), trie.keysWithPrefix("worldd").toSet())
        assertEquals(setOf("fo", "foo"), trie.keysWithPrefix("f").toSet())
        assertEquals(setOf("fo", "foo"), trie.keysWithPrefix("fo").toSet())
        assertEquals(setOf("foo"), trie.keysWithPrefix("foo").toSet())
        assertEquals(setOf("ba", "bar", "baz", "baa"), trie.keysWithPrefix("b").toSet())
        assertEquals(setOf("ba", "bar", "baz", "baa"), trie.keysWithPrefix("ba").toSet())
        assertEquals(setOf("bar"), trie.keysWithPrefix("bar").toSet())
        assertEquals(setOf("baz"), trie.keysWithPrefix("baz").toSet())
        assertEquals(setOf("baa"), trie.keysWithPrefix("baa").toSet())
    }

    @Test
    fun keysThatMatch() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        trie.put("ba", 6)
        trie.put("baa", 7)
        trie.put("fo", 8)
        trie.put("f", 9)
        trie.put("faz", 10)
        assertEquals(setOf("hello"), trie.keysThatMatch("h.llo").toSet())
        assertEquals(setOf("world"), trie.keysThatMatch("w.rld").toSet())
        assertEquals(setOf("foo", "faz"), trie.keysThatMatch("f..").toSet())
        assertEquals(setOf("bar", "baz", "baa"), trie.keysThatMatch("ba.").toSet())
        assertEquals(setOf("ba"), trie.keysThatMatch("b.").toSet())
        assertEquals(setOf("f"), trie.keysThatMatch(".").toSet())
        assertEquals(setOf("fo"), trie.keysThatMatch("f.").toSet())
        assertEquals(setOf("foo"), trie.keysThatMatch("fo.").toSet())
        assertEquals(setOf("baz", "faz"), trie.keysThatMatch("..z").toSet())
        assertEquals(setOf("baz", "faz"), trie.keysThatMatch(".az").toSet())
    }

    @Test
    fun longestPrefixOf() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("bar", 2)
        trie.put("baz", 2)
        trie.put("baa", 2)
        assertEquals("hello", trie.longestPrefixOf("hello"))
        assertEquals("hello", trie.longestPrefixOf("helloo"))
        assertEquals("", trie.longestPrefixOf("boo"))
        assertEquals("bar", trie.longestPrefixOf("bar"))
        assertEquals("baz", trie.longestPrefixOf("baz"))
        assertEquals("baa", trie.longestPrefixOf("baa"))
        assertEquals("", trie.longestPrefixOf("bas"))
    }

    @Test
    fun delete() {
        val trie = Trie<Int>()
        trie.put("hello", 1)
        trie.put("world", 2)
        trie.put("foo", 3)
        trie.put("bar", 4)
        trie.put("baz", 5)
        trie.put("ba", 6)
        trie.put("baa", 7)
        trie.put("fo", 8)
        trie.put("f", 9)
        trie.put("faz", 10)

        assertEquals(10, trie.size)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("cat")
        assertEquals(10, trie.size)
        assertEquals(1, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("hello")
        assertEquals(9, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(2, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("world")
        assertEquals(8, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(3, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("foo")
        assertEquals(7, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(4, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("bar")
        assertEquals(6, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(5, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("baz")
        assertEquals(5, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(6, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("ba")
        assertEquals(4, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(7, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("baa")
        assertEquals(3, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(null, trie.get("baa"))
        assertEquals(8, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("fo")
        assertEquals(2, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(null, trie.get("baa"))
        assertEquals(null, trie.get("fo"))
        assertEquals(9, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("f")
        assertEquals(1, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(null, trie.get("baa"))
        assertEquals(null, trie.get("fo"))
        assertEquals(null, trie.get("f"))
        assertEquals(10, trie.get("faz"))

        trie.delete("faz")
        assertEquals(0, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(null, trie.get("baa"))
        assertEquals(null, trie.get("fo"))
        assertEquals(null, trie.get("f"))
        assertEquals(null, trie.get("faz"))

        trie.delete("hello")
        assertEquals(0, trie.size)
        assertEquals(null, trie.get("hello"))
        assertEquals(null, trie.get("world"))
        assertEquals(null, trie.get("foo"))
        assertEquals(null, trie.get("bar"))
        assertEquals(null, trie.get("baz"))
        assertEquals(null, trie.get("ba"))
        assertEquals(null, trie.get("baa"))
        assertEquals(null, trie.get("fo"))
        assertEquals(null, trie.get("f"))
        assertEquals(null, trie.get("faz"))
    }
}
